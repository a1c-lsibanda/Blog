"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

#import user/*.graphql
#import comments/*.graphql
#import likes/*.graphql
#import posts/*.graphql

type Query {
    users: [User!]! @guard(with: ["api"]) @paginate(defaultCount: 10)
    user(id: ID @eq): User @find @guard(with: ["api"])

    post(id: ID @eq): Posts @find @guard(with: ["api"])
    posts: [Posts!]! @all @guard(with: ["api"])

    comment(id: ID @eq): Comments @find @guard(with: ["api"])
    comments: [Comments!]! @all @guard(with: ["api"])

    like(id: ID @eq): Likes @find @guard(with: ["api"])
    likes: [Likes!]! @all @guard(with: ["api"])

    latestPost: Posts! @guard(with: ["api"])
    # me: User! @middleware(checks:["auth:api"]) @auth
    me: User @auth
}

type Mutation {
    login(input: LoginInput @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve")
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve")
    logout: LogoutResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
    forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
    updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
    register(input: RegisterInput @spread): RegisterResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve")
    socialLogin(input: SocialLoginInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve")
    verifyEmail(input: VerifyEmailInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve")
    updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve") @guard(with: ["api"])

    # Like
    createLike(
        user_id: String! @rules(apply: ["required", "integer"])
        post_id: String! @rules(apply: ["required", "integer"])
    ): Likes @create
    deleteLike(
        id: String! @rules(apply: ["required", "integer"])
    ): Likes @delete

    # Comment
    createComment(
        user_id: String! @rules(apply: ["required", "integer"])
        post_id: String! @rules(apply: ["required", "striintegerntegering"])
        reply:   String! @rules(apply: ["required", "integer"])
    ): Likes @create
    updateComment(
        id:      String! @rules(apply: ["required"])
        user_id: String! @rules(apply: ["required", "integer"])
        post_id: String! @rules(apply: ["required", "integer"])
        reply:   String! @rules(apply: ["required", "string"])
    ): Likes @update
    deleteComment(
        id: String! @rules(apply: ["required", "integer"])
    ): Likes @delete

    # Comment
    createComment(
        user_id: String! @rules(apply: ["required", "integer"])
        post_id: String! @rules(apply: ["required", "striintegerntegering"])
        reply:   String! @rules(apply: ["required", "integer"])
    ): Likes @create
    updateComment(
        id:      String! @rules(apply: ["required"])
        user_id: String! @rules(apply: ["required", "integer"])
        post_id: String! @rules(apply: ["required", "integer"])
        reply:   String! @rules(apply: ["required", "string"])
    ): Likes @update
    deleteComment(
        id: String! @rules(apply: ["required", "integer"])
    ): Likes @delete
}
